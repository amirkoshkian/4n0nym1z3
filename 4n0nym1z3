#!/usr/bin/python3

from os import system, path, getlogin
from random import randrange, randint, choice
from json import load
from requests import get, exceptions
from socks import setdefaultproxy, PROXY_TYPE_SOCKS5, socksocket
from socket import socket
from time import sleep
from scapy.all import Ether, ARP, srp, sniff
from multiprocessing import Process
from sys import argv

############################################################################################## Start Variables
help_command = r"""4n0nym1z3 1.0.0 - (C) 2024
https://github.com/amirkoshkian/4n0nym1z3

 _  _          ___                        _     _____
| || |  _ __  / _ \ _ __  _   _ _ __ ___ / |___|___ /
| || |_| '_ \| | | | '_ \| | | | '_ ` _ \| |_  / |_ \
|__   _| | | | |_| | | | | |_| | | | | | | |/ / ___) |
   |_| |_| |_|\___/|_| |_|\__, |_| |_| |_|_/___|____/
                          |___/

note : after executing the command 'start or stop', killed apps and clear cache

Usage: sudo 4n0nym1z3

Options:
    start : start 4n0nym1z3 with proxychains
    stop : stop 4n0nym1z3
    status : show status
    ti : auto tor ip changer
    am : activate anti mitm
    tiam : run `-ti` and `-am`
    kc : kill apps and clear cache
    lk : log killer
    kclk : run `-kc` and `-lk`"""
############################################################################################### End Variables


############################################################################################### Start Section Functions
######################################## Start Section Start Functions
# Start Section Function Start Kill Apps And Clear Cache
def StartKillAppsAndClearCache():
    system(
        "sudo killall -q chrome dropbox skype icedove thunderbird firefox firefox-esr chromium xchat hexchat transmission steam firejail"
    )
    system(
        "sudo bleachbit -l | grep -E '[a-z0-9_\\-]+\\.[a-z0-9_\\-]+' | grep -v system.free_disk_space | grep -v system.memory | grep -v journald.clean | sudo xargs bleachbit -c > /dev/null"
    )
    system("sudo killall dnsmasq")


# End Section Function Start Kill Apps And Clear Cache


# Start Section Function Start Ip Changer With Proxy Chains
def StartIpChanger():
    system("sudo iptables-save > /usr/share/4n0nym1z3/data/iptables.txt")
    system(
        """tor_uid="$(sudo id -u debian-tor)"
sudo iptables -F
sudo iptables -X
sudo iptables -t nat -F
sudo iptables -t nat -X
sudo iptables -t nat -A OUTPUT -d 10.192.0.0/10 -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports 9040
sudo iptables -t nat -A OUTPUT -d 127.0.0.1/32 -p udp -m udp --dport 53 -j REDIRECT --to-ports 5353
sudo iptables -t nat -A OUTPUT -m owner --uid-owner $tor_uid -j RETURN
sudo iptables -t nat -A OUTPUT -o lo -j RETURN
for lan in 127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16; do
    sudo iptables -t nat -A OUTPUT -d $lan -j RETURN
done
sudo iptables -t nat -A OUTPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports 9040
sudo iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT
sudo iptables -A INPUT -i lo -j ACCEPT
sudo iptables -A INPUT -j DROP
sudo iptables -A FORWARD -j DROP
sudo iptables -A OUTPUT -m conntrack --ctstate INVALID -j DROP
sudo iptables -A OUTPUT -m state --state INVALID -j DROP
sudo iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT
sudo iptables -A OUTPUT -m owner --uid-owner $tor_uid -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j ACCEPT
sudo iptables -A OUTPUT -d 127.0.0.1/32 -o lo -j ACCEPT
sudo iptables -A OUTPUT -d 127.0.0.1/32 -p tcp -m tcp --dport 9040 --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT
sudo iptables -A OUTPUT -j DROP
sudo iptables -P INPUT DROP
sudo iptables -P FORWARD DROP
sudo iptables -P OUTPUT DROP"""
    )
    system("sudo cat /etc/tor/torrc > /usr/share/4n0nym1z3/data/torrc.txt")
    system(
        """sudo cat > /etc/tor/torrc << EOF
VirtualAddrNetwork 10.192.0.0/10
TransPort 127.0.0.1:9040 IsolateClientAddr IsolateSOCKSAuth IsolateClientProtocol IsolateDestPort IsolateDestAddr
SocksPort 127.0.0.1:9050 IsolateClientAddr IsolateSOCKSAuth IsolateClientProtocol IsolateDestPort IsolateDestAddr
DNSPort 127.0.0.1:5353
ControlPort 9051
AutomapHostsOnResolve 1
AutomapHostsSuffixes .exit,.onion
RunAsDaemon 1
Sandbox 1
HardwareAccel 1
TestSocks 1
WarnUnsafeSocks 1
AllowNonRFC953Hostnames 0
AllowDotExit 0
WarnPlaintextPorts 23,109,110,143,80
ClientRejectInternalAddresses 1
NewCircuitPeriod 40
MaxCircuitDirtiness 600
MaxClientCircuitsPending 48
UseEntryGuards 1
UseEntryGuardsAsDirGuards 1
EnforceDistinctSubnets 1
ExcludeNodes {US},{FR},{UK},{GB}
ExitNodes 217.115.10.132,217.115.10.131,{kp},{af},{dz},{cu},{gm},{ht},{is},{mr},{ng},{ru},{vn},{so}
StrictNodes 1
EOF"""
    )
    system("sudo systemctl --system daemon-reload")
    system("sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1 > /dev/null")
    system("sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1 > /dev/null")
    system("sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=1 > /dev/null")
    system("sudo sysctl -w net.ipv6.conf.eth0.disable_ipv6=1 > /dev/null")
    system(
        "sudo cat /etc/proxychains4.conf > /usr/share/4n0nym1z3/data/proxychains4.txt"
    )
    system(
        """sudo cat > "/etc/proxychains4.conf" << EOF
dynamic_chain
proxy_dns
remote_dns_subnet 224
tcp_read_time_out 15000
tcp_connect_time_out 8000
[ProxyList]
socks4 127.0.0.1 9050
socks5 127.0.0.1 9050
http 127.0.0.1 9050
EOF"""
    )
    system("sudo systemctl restart tor")
    setdefaultproxy(PROXY_TYPE_SOCKS5, "127.0.0.1", 9050)
    socket = socksocket
    system("sudo cat /etc/resolv.conf > /usr/share/4n0nym1z3/data/resolv.txt")
    system(
        """sudo cat > "/etc/resolv.conf" << EOF
# generated by 4n0nym1z3

nameserver 84.200.69.80
nameserver 84.200.70.40
nameserver 91.239.100.100
nameserver 89.233.43.71
EOF"""
    )


# End Section Function Start Ip Changer With Proxy Chains


# Start Section Function Start Mac Changer
def StartMacChanger():
    if path.isdir("/usr/share/4n0nym1z3/data/mac_addresses") == False:
        system("sudo mkdir /usr/share/4n0nym1z3/data/mac_addresses")
    system(
        "sudo ip -o link show | awk -F': ' '{print $2}' > /usr/share/4n0nym1z3/data/mac_addresses.txt"
    )
    mac_addresses = open("/usr/share/4n0nym1z3/data/mac_addresses.txt", "r")
    for mac_addr in mac_addresses.read().split():
        system(
            f"sudo cat /sys/class/net/{mac_addr}/address > /usr/share/4n0nym1z3/data/mac_addresses/{mac_addr}.txt"
        )
        mac_addresses_file = open(
            f"/usr/share/4n0nym1z3/data/mac_addresses/{mac_addr}.txt", "r"
        )
        mac_addresses_system = open(f"/sys/class/net/{mac_addr}/address", "r")
        mac_address_created = ":".join(
            [("0" + hex(randint(0, 256))[2:])[-2:].upper() for _ in range(6)]
        )
        system(f"sudo ip link set {mac_addr} down")
        system(f"sudo ip link set {mac_addr} address {mac_address_created}")
        system(f"sudo ip link set {mac_addr} up")
    # mac_addresses.close();
    # mac_addresses_file.close();
    # mac_addresses_system.close();


# End Section Function Start Mac Changer


# Start Section Function Start Timezone Changer
def StartTimezoneChanger():
    system(
        "sudo timedatectl show | grep Timezone | sed 's/Timezone=//g' > /usr/share/4n0nym1z3/data/timezone.txt"
    )
    SetTimezone()


# End Section Function Start Timezone Changer


# Start Section Function Start Hostname Changer
def StartHostnameChanger():
    system("sudo cat /etc/hostname > /usr/share/4n0nym1z3/data/hostname.txt")
    system("sudo cat /etc/hosts > /usr/share/4n0nym1z3/data/hosts.txt")
    system("sudo systemctl stop NetworkManager")
    system("sudo dhclient -r")
    system("sudo rm -f /var/lib/dhcp/dhclient*")
    hostnames = [
        "windows10-enterprise",
        "windows10-pro",
        "windows10-enterprise-ltsc",
        "windows8-em",
        "windows8-enterprise",
        "windows8-pro",
        "windows7-professional",
        "windows7-enterprise",
        "windows7-ultimate",
        "windows-vista-business",
        "windowsxp-professional",
        "macos11",
        "osx10",
        "macbook-air",
        "macbook",
        "macbook-pro",
        "macos10",
        "macos12",
        "macos13",
        "macos14",
    ]
    random_number = randrange(0, 19)
    hostname_text = hostnames[random_number]
    system(f"sudo echo {hostname_text} > /etc/hostname")
    system(
        f"""sudo cat > "/etc/hosts" << EOF
127.0.0.1 {hostname_text}
127.0.1.1 {hostname_text}

# The following lines are desirable for IPv6 capable hosts
::1 localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF"""
    )
    system("sudo systemctl start NetworkManager")


# End Section Function Start Hostname Changer


# Start Section Function Start Browser Anonymization
def StartBrowserAnonymization():
    system(
        """sudo cat > "/etc/firefox-esr/firefox-esr.js" << EOF
pref("privacy.firstparty.isolate", true);
pref("privacy.resistFingerprinting", true);
pref("privacy.trackingprotection.fingerprinting.enabled", true);
pref("privacy.trackingprotection.cryptomining.enabled", true);
pref("privacy.trackingprotection.enabled", true);
pref("browser.send_pings", false);
pref("browser.urlbar.spectulativeConnect.enabled", false);
EOF"""
    )


# End Section Function Start Browser Anonymization


# Start Section Function Start Cold Boot
def StartColdBoot():
    system(
        """sudo swapoff -a
swapon -a
echo 1024 > /proc/sys/vm/min_free_kbytes
echo 3 > /proc/sys/vm/drop_caches
echo 1 > /proc/sys/vm/oom_kill_allocating_task
echo 1 > /proc/sys/vm/overcommit_memory
echo 0 > /proc/sys/vm/oom_dump_tasks"""
    )


# End Section Function Start Cold Boot


# Start Section Function Start Log Killer
def StartLogKiller():
    system("sudo find / -iname '*.log' -type f -exec sudo shred -uf {} \\;")
    system("sudo find / -iname '*.log.*' -type f -exec sudo shred -uf {} \\;")
    system("sudo find / -iname '*.logs' -type f -exec sudo shred -uf {} \\;")
    system("sudo find / -iname '*.logs.*' -type f -exec sudo shred -uf {} \\;")
    system("sudo find / -iname '*history' -type f -exec sudo shred -uf {} \\;")


# End Section Function Start Log Killer


# Start Section Function Set Timezone
def SetTimezone():
    try:
        if get("http://ip-api.com").status_code == 200:
            timezone = (
                get("http://ip-api.com")
                .text.split("timezone")[1]
                .split(":")[1]
                .split(",")[0]
                .split('"')[1]
            )
            system(f"sudo timedatectl set-timezone {timezone}")
    except exceptions.HTTPError:
        pass
    except exceptions.ReadTimeout:
        pass
    except exceptions.ConnectionError:
        pass
    except exceptions.RequestException:
        pass


# End Section Function Set Timezone


# Start Section Function Start Auto Tor Ip Changer
def StartAutoTorIpChanger():
    print("Started Ip Changer")
    while True:
        sleep(30)
        system("sudo systemctl reload tor")
        sleep(2)
        SetTimezone()
        print("Ip Changed")


# End Section Function Start Auto Tor Ip Changer


# Start Section Function Start Anti Mitm
def StartAntiMitm():
    print("Started Anti Mitm")

    def process(packet):
        if packet.haslayer(ARP):
            if packet[ARP].op == 2:
                try:
                    real_mac = srp(
                        Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst=packet[ARP].psrc),
                        timeout=3,
                        verbose=False,
                    )[0][0][1].hwsrc
                    response_mac = packet[ARP].hwsrc
                    if real_mac != response_mac:
                        os.system(
                            f"""iptables -A INPUT -m mac --mac-source {response_mac} -j DROP"""
                        )
                except IndexError:
                    pass

    sniff(store=False, prn=process)


# End Section Function Start Anti Mitm
######################################## End Section Start Functions


######################################## Start Section Stop Functions
# Start Section Function Stop Ip Changer With Tor
def StopIpChanger():
    system(
        """sudo iptables -F
sudo iptables -X
sudo iptables -t nat -F
sudo iptables -t nat -X
sudo iptables -P INPUT ACCEPT
sudo iptables -P FORWARD ACCEPT
sudo iptables -P OUTPUT ACCEPT"""
    )
    if path.isfile("/usr/share/4n0nym1z3/data/iptables.txt") == True:
        system("sudo iptables-restore /usr/share/4n0nym1z3/data/iptables.txt")
        system("sudo shred -uf /usr/share/4n0nym1z3/data/iptables.txt")
    system("sudo systemctl --system daemon-reload")
    system("sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0 > /dev/null")
    system("sudo sysctl -w net.ipv6.conf.default.disable_ipv6=0 > /dev/null")
    system("sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=0 > /dev/null")
    system("sudo sysctl -w net.ipv6.conf.eth0.disable_ipv6=0 > /dev/null")
    system("sudo systemctl stop tor")
    if path.isfile("/usr/share/4n0nym1z3/data/torrc.txt") == True:
        system("sudo cat /usr/share/4n0nym1z3/data/torrc.txt > /etc/tor/torrc")
        system("sudo shred -uf /usr/share/4n0nym1z3/data/torrc.txt")
    system("sudo cat /usr/share/4n0nym1z3/data/resolv.txt > /etc/resolv.conf")
    system("sudo shred -uf /usr/share/4n0nym1z3/data/resolv.txt")
    setdefaultproxy(None)
    socket = socksocket
    if path.isfile("/usr/share/4n0nym1z3/data/proxychains4.txt") == True:
        system(
            "sudo cat /usr/share/4n0nym1z3/data/proxychains4.txt > /etc/proxychains4.conf"
        )
        system("sudo shred -uf /usr/share/4n0nym1z3/data/proxychains4.txt")


# End Section Function Stop Ip Changer With Tor


# Start Section Function Stop Mac Changer
def StopMacChanger():
    mac_addresses = open("/usr/share/4n0nym1z3/data/mac_addresses.txt", "r")
    for mac_addr in mac_addresses.read().split():
        mac_address_created = open(
            f"/usr/share/4n0nym1z3/data/mac_addresses/{mac_addr}.txt", "r"
        )
        system(f"sudo ip link set {mac_addr} down")
        system(f"sudo ip link set {mac_addr} address {mac_address_created.read()}")
        system(f"sudo ip link set {mac_addr} up")
    system("sudo shred -uf /usr/share/4n0nym1z3/data/mac_addresses.txt")
    system("sudo shred -uf /usr/share/4n0nym1z3/data/mac_addresses")
    # mac_addresses.close();
    # mac_address_created.close();


# End Section Function Stop Mac Changer


# Start Section Function Stop Timezone Changer
def StopTimezoneChanger():
    time_zone = open("/usr/share/4n0nym1z3/data/timezone.txt", "r")
    system(f"sudo timedatectl set-timezone {time_zone.read()}")
    system("sudo shred -uf /usr/share/4n0nym1z3/data/timezone.txt")
    # time_zone.close();


# End Section Function Stop Timezone Changer


# Start Section Function Stop Hostname Changer
def StopHostnameChanger():
    system("sudo systemctl stop NetworkManager")
    system("sudo dhclient -r")
    system("sudo rm -f /var/lib/dhcp/dhclient*")
    system("sudo cat /usr/share/4n0nym1z3/data/hostname.txt > /etc/hostname")
    system("sudo cat /usr/share/4n0nym1z3/data/hosts.txt > /etc/hosts")
    system("sudo shred -uf /usr/share/4n0nym1z3/data/hostname.txt")
    system("sudo shred -uf /usr/share/4n0nym1z3/data/hosts.txt")
    system("sudo systemctl start NetworkManager")


# End Section Function Stop Hostname Changer
######################################## End Section Stop Functions
############################################################################################### End Section Functions

############################################################################################### Start Section Main
try:
    if path.isdir("/usr/share/4n0nym1z3/data") == False:
        system("sudo mkdir /usr/share/4n0nym1z3/data")
    if path.isfile("/usr/share/4n0nym1z3/data/status.txt") == False:
        system("sudo echo 0 > /usr/share/4n0nym1z3/data/status.txt")

    status = open("/usr/share/4n0nym1z3/data/status.txt", "r")
    if len(argv) == 1:
        system("sudo clear")
        print(help_command)
    elif argv[1] == "start":
        system("sudo clear")
        status.seek(0)
        if int(status.read()) == 0:
            StartKillAppsAndClearCache()

            StartIpChanger()

            StartMacChanger()

            StartTimezoneChanger()

            StartHostnameChanger()

            StartBrowserAnonymization()

            StartColdBoot()

            StartLogKiller()

            system("sudo echo 1 > /usr/share/4n0nym1z3/data/status.txt")
            system("sudo clear")
            print("4n0nym1z3 successfully enabled")
        else:
            print("4n0nym1z3 is already enabled")
    elif argv[1] == "stop":
        system("sudo clear")
        status.seek(0)
        if int(status.read()) == 1:
            StopIpChanger()

            StartKillAppsAndClearCache()

            StopMacChanger()

            StopTimezoneChanger()

            StopHostnameChanger()

            StartLogKiller()

            system("sudo echo 0 > /usr/share/4n0nym1z3/data/status.txt")
            system("sudo clear")
            print("4n0nym1z3 successfully disabled")
        else:
            print("4n0nym1z3 is already disabled")
    elif argv[1] == "ti":
        system("sudo clear")
        StartAutoTorIpChanger()
    elif argv[1] == "am":
        system("sudo clear")
        StartAntiMitm()
    elif argv[1] == "tiam":
        system("sudo clear")
        StartAutoTorIpChanger = Process(target=StartAutoTorIpChanger)
        StartAntiMitm = Process(target=StartAntiMitm)

        StartAutoTorIpChanger.start()
        StartAntiMitm.start()

        StartAutoTorIpChanger.join()
        StartAntiMitm.join()
    elif argv[1] == "kc":
        system("sudo clear")
        StartKillAppsAndClearCache()
        system("sudo clear")
    elif argv[1] == "lk":
        system("sudo clear")
        StartLogKiller()
        system("sudo clear")
    elif argv[1] == "kclk":
        system("sudo clear")
        StartKillAppsAndClearCache()
        StartLogKiller()
        system("sudo clear")
    elif argv[1] == "status":
        system("sudo clear")
        status.seek(0)
        if int(status.read()) == 1:
            print("4n0nym1z3 is already enabled")
        else:
            print("4n0nym1z3 is already disabled")
    else:
        system("sudo clear")
        print(help_command)
        print(
            f"""
ERROR `{argv[1]}` is an unknown argument"""
        )
    # status.close();
except Exception as e:
    print(e)
############################################################################################### End Section Main
